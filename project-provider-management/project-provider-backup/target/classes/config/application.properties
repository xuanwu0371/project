server.port=8081
server.servlet.context-path=/

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/project?useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

mybatis.type-aliases-package=com.aaa.lee.model
mybatis.mapper-locations=classpath:mapper/*Mapper.xml

# 下面的配置比较常用
# 当项目运行的时候，会自动加载sql文件，去生成数据库表以及表数据(前提是你的数据库必须存在)
# 初始化数据库
# 初始化的表和表中的数据官方的意思是让你分开写，但是后来我发现合在一起写也行
# 官方文档的意思schema只能让你初始化表
#spring.datasource.schema=classpath:sql/qy_109110.sql
# data才是初始化数据用的
# spring.datasource.data=

# always：每一次启动项目都会加载sql文件，初始化数据库
# never: 每次启动项目都不会加载sql文件
# embedded：加载内存数据库(非关系型数据库(redis...))
#spring.datasource.initialization-mode=always

# todo eureka的一系列配置
eureka.client.service-url.defaultZone=http://eureka01:6081/eureka,http://eureka02:6082/eureka,http://eureka03:6083/eureka
#配置eureka的实例id(和数据库的主键一样,在同一个集群eureka中是不允许重复的)
eureka.instance.instance-id=provider-backup-8081

# 实际开发中的细节
# 如果有一天你请假(结婚)--->但是在公司你所负责的provider抛异常了--->可以让同事帮忙处理--->如果你的同时可以直接获取到你服务器的ip地址，就可以直接远程操作修改异常
# 配置当鼠标悬浮否一个provider的时候，显示的不是localhost，直接显示ip地址
eureka.instance.prefer-ip-address=true

# 这个时候发现了其实eureka所显示的provider都是一个a标签，但是点进去之后会报错404(这个时候也是springcloud所给程序员提供的一种便利)
# 当点击a标签的时候，显示的就是provider的开发者，公司名称，provider所提供的功能，provider下所有controller以及调用方法
# info开头--->剩下的信息你可以随意去编写
# 如果想要让以下信息生效，就必须要添加jar包(必须要添加actuator的jar包)
info.author.name=lee
info.company.name=AAA Software EDU
info.project.description=provider-backup-8081


# 虽然已经成功的运行起来了，但是会有一个问题存在Application的值是UNKNOWN
# 以后consumer就不会再通过ip地址来访问provider了，有了eureka之后，会通过eureka的Application的值来进行访问
# 除了负载均衡之外，绝对不能重复
# 如果要实现负载均衡，application.name的值必须要保持一致
spring.application.name=provider-backup

# 失效eureka的自我保护机制
# 配置自己向eureka去发送心跳的时间(单位是秒)
eureka.instance.lease-renewal-interval-in-seconds=5
# 配置在eureka最后一次接收到心跳往后数几秒进行剔除
eureka.instance.lease-expiration-duration-in-seconds=8

# 通用mapper的配置
# 因为通用mapper并不只是支持MySQL，所以当需要使用自增主键的时候需要指定数据库的类型
mapper.identity=MYSQL
# 配置通用mapper的基础类
mapper.mappers=tk.mybatis.mapper.common.Mapper
# <update> update set user where 1 = 1 <if test='username != null'> and username = #{username} </if> </update>
mapper.not-empty=true
# 因为项目中大量使用到了枚举，但是通用mapper并不认识枚举，所以需要把枚举让他默认自动转换为基础类型处理
mapper.enum-as-simple-type=true

# pagehelper分页插件
pagehelper.helper-dialect=mysql
pagehelper.params=count=countSql
pagehelper.reasonable=false
pagehelper.support-methods-arguments=true